from Crypto.Util import number
import random

class bbs:
    
    #------------------------------------------------------------------------------
    # наибольший общий делитель двух чисел
    def NOD(self, a, b):
        
        while a != b:
            if a > b:
                a = a - b
            else:
                b = b - a        
                
        return a
    
    #------------------------------------------------------------------------------
    # генерация простых чисел
    def prime(self, n):
        
        # генерируем простое число x пока x mod 4 != 3
        
        while True:
            x = number.getPrime(n)
            if  x % 4 == 3:
                return x
    
    #------------------------------------------------------------------------------
    # выбираем стартовое целое число s
    def getS(self, N):
        
        while True:
            s = random.randint(1,N-1)
            
            if self.NOD(s, N) == 1:
                return s
    
    #------------------------------------------------------------------------------
    # алгоритм BBS для генерации ключа
    def BBS(self, m):
        
        bits = 160
        
        # ----------
        # генерируем простые числа p и q
        
        p = self.prime(bits)
        
        q = p
        
        # проверяем, чтобы x и y не были одинковыми числами
        while (p == q):
            q = self.prime(bits)
        
        N = p*q
        
        # генерируем целое число s
        s = self.getS(N)
        
        # задаём u0
        ui = s**2 % N
        
        x = ""
        
        # ----------
        # формируем выходную последовательность
        
        for i in range(m):
            
            ui =  ui**2 % N
            
            # двоичное представление ui
            bui = bin(ui)
            
            # запоминаем младший бит двоичного представления ui
            x = x + bui[len(bui)- 1]
        
        return x