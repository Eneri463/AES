class wwi:
    
    
    # -----------------------------------------------------------------------------
    # проверка, корректно ли задан двоичный текст
    def check2(self, M):
        
        flag = 0
        
        if M[0] == ' ':
            return False, 'Текст не соответствует выбранному формату (проверьте пробелы)'
        
        for i in range(len(M)):
            
            if M[i] != '1' and M[i] != '0':
                
                if M[i] != ' ':
                    return False, 'Текст не соответствует выбранному формату'
                else:
                    if M[i-1] == ' ':
                        return False, 'Текст не соответствует выбранному формату (проверьте пробелы)'
                    else:
                        flag = -1
            
            flag = flag + 1
            
            if flag == 9:
                return False, 'Каждый сивмол кодируется 8-ью битами'
        
        return True, 'Ок'
    
    # -----------------------------------------------------------------------------
    # проверка, корректно ли задан шестнадцатиричный текст
    def check16(self, M):
        
        flag = 0
        
        if M[0] == ' ':
            return False, 'Текст не соответствует выбранному формату (проверьте пробелы)'
        
        for i in range(len(M)):
            
            if (M[i] < 'A' or M[i] > 'F') and (M[i] < '0' or M[i] > '9'):
                
                if M[i] != ' ':
                    return False, 'Текст не соответствует выбранному формату'
                else:
                    if M[i-1] == ' ':
                        return False, 'Текст не соответствует выбранному формату (проверьте пробелы)'
                    else:
                        flag = -1
            
            flag = flag + 1
            
            if flag == 3:
                return False, 'Максимальное значение FF'
        
        return True, 'Ок'
    
    
    # -----------------------------------------------------------------------------
    # проверка отсутствия кириллицы и символов, номер которых больше 255
    def checkSymbol(self, M):
        
        for i in range(len(M)):
            
            if ord(M[i]) > 255:
                return False, 'Текст не должен содержать кириллицу'
        
        return True, 'Ок'
    
    # -----------------------------------------------------------------------------
    # проверка корректного заполнения номера бита
    def checkNumber(self, n):
        
        for i in range(len(n)):
            if (n[i] < '0' or n[i] > '9'):
                return False, 'Число задано некорректно'
        
        return True, 'Ок'
    
    # -----------------------------------------------------------------------------
    # перевод текста из 16-ричной в 2-ичную систему
    def from16To2(self, M):
        
        res = []
        
        for i in range(len(M)):
            
            a = bin(int(M[i],16))[2:]
            
            while (len(a)<8):
                a = '0' + a
            
            res.append(a)
        
        return res
    
    # -----------------------------------------------------------------------------
    # перевод текста из 2-ичную в 16-ричную систему
    def from2To16(self, M):
        
        res = []
        
        for i in range(len(M)):
            
            a = hex(int(M[i],2)).upper()[2:]
            
            res.append(a)
        
        return res
    
    # -----------------------------------------------------------------------------
    # перевод текста из символьного в 2-ичный формат
    def fromSymbolTo2(self, M):
        
        res = []
        
        for i in range(len(M)):
            
            a = bin(ord(M[i]))[2:]
            
            while (len(a)<8):
                a = '0' + a
            
            res.append(a)
        
        return res
    
    # -----------------------------------------------------------------------------
    # перевод текста из 2-ичного формата в символьный
    def from2ToSymbol(self, M):
        
        res = ""
        
        for i in range(len(M)):
            
            a = chr(int(M[i],2))
            
            res = res + a
        
        return res
    
    # -----------------------------------------------------------------------------
    # разделяем каждые 8 битов 2-ичного представления(если требуется)
    def newRepresent(self, key):
        
        res = []
        a = ''
        flag = 0
        
        for i in range(len(key)):
                
            a = a + key[i]
            flag = flag+1
                
            if flag == 8:
                    
                flag = 0
                res.append(a)
                a = ''
        
        return res
